# =============================================================================================

# >>> My Default Config For ~/.*rc Files <<<

# Standard set's:
set +o histexpand

# Standard shopt's:
shopt -s globstar

# Import user shellrc:
[ -f "$HOME/.config/shellrc" ] && . "$HOME/.config/shellrc"

# =============================================================================================

# >>> Standard Aliases <<<

# Security:
#alias sudo='sudo -k '
alias sudo='sudo '

# First's:
alias cbfull='xclip -sel clip'
alias cb="xclip -sel clip -rmlastnl"

# Git:
alias ggb='cat <(git branch --color=always --list)'
alias ggr='git restore ./; git clean -f ./'
alias ggd='cat <(git diff --color=always)'
alias ggs='git status'
alias ggp='git pull origin `git branch --show-current`; git fetch --tags origin'

alias ggbf='cat <(git branch --color=always --all -vv)'
alias ggba='cat <(git branch --color=always --all)'
alias ggdd='git diff | delta --color-only'
alias ggsa='ga "git status"'
alias ggrf='git restore --staged ./; git restore ./; git clean -f ./'

alias ggan='git add ./ && git commit --amend --no-edit && git push -f'
alias ggam='git add ./ && git commit --amend && git push -f'
alias ggsy='git switch main 2>&- || git switch master && git fetch upstream HEAD && git merge FETCH_HEAD && git push'
alias ggrm='git rebase -i `git merge-base HEAD origin/HEAD`'

# Generals:
alias tmp='[ ! -d /tmp/tmp/ ] && mkdir -pv /tmp/tmp/; cd /tmp/tmp/'
alias gpgp='gpg --no-symkey-cache --pinentry-mode loopback'
alias rmll='shopt -s extglob; rm -rfv ./{.[^.]*,*}'
alias mktp='mktemp /tmp/XXXXXXXXXXXXXX.txt'
alias pwgn='pwgen -scny 24 1'
alias ips='ip -br -c address'
alias sb='source ~/.bashrc'
alias intrr='echo "$?"'
alias jq='jq -C'
alias hsgp="history | sed -E 's/[[:blank:]]+[[:digit:]]+[[:blank:]]+//' | grep -iE"

alias opened-doors='lsof -nPi | grep -F LISTEN'
alias external-ip="curl -fsSL http://ipecho.net/plain | sed 's/$/\n/'"
alias getwingeo='xdotool selectwindow getwindowgeometry'

# CLI's:
alias lsblkf='lsblk --output=MODEL,STATE,TYPE,PATH,FSTYPE,LABEL,UUID'
alias lsblkd='lsblk --output=NAME,RO,RM,SIZE,MOUNTPOINTS'
alias dff='df -h --output=source,size,used,avail,pcent,target --exclude-type={tmpfs,efivarfs,devtmpfs}'

# Standards:
alias lls='ls --color=always -lhF'
alias grep='grep --color=always'
alias rms='shred -zuvn 10'
alias rm='rm -i'
alias llt='ls --color=always -lhtcF'

# >>> Depreceated!
#alias rmallz='setopt extendedglob; rm -rfv ./(.|)*'
#alias pgcat='pygmentize -l'
#alias sz='source ~/.zshrc'
#alias vimz='vim ~/.zshrc'
#alias ctzh='hlct bash ~/.zshrc'
#alias vmbs='vim ~/.bashrc'
#alias ctbs='hlct bash ~/.bashrc'
#alias ggra='ga "git restore ./"; ga "git clean -f ./"'
#alias ggpa='ga -g'

# =============================================================================================

# >>> Functions <<<

# Short's:
mkcd() { local PATHWAY="${1:?need a pathway to make and go}"; mkdir -pv "$PATHWAY" && cd "$PATHWAY"; echo -n 'pwd: '; pwd; }
ts() { [ "-b" != "$1" ] && local LANG=en:pt-br || { local LANG=pt-br:en; shift 1; }; trans -b "$LANG" "`eval 'rs "$*"'`"; }
insp() { eval "echo \${${1}}"; }
psgp() { local PATTERN=${1:-need pattern to search}; ps -xo pid,state,command | grep --color=always -iE "$PATTERN" | head -n -1; }

diffadv() { diff "${1:?need first file to compare}" "${2:?need second file to compare}" -u | colordiff | diff-highlight; }
calcr() { /usr/bin/bc <<< "scale=1; x=${1:?nedd a expression to calculate}; if (x < 0) x-=.5 else x+=.5; scale=0; x/1"; }
diffstr() { if diff --color=always <(rs "$1") <(rs "$2"); then echo -e "\e[1;32;40mNo differences ✔\e[m"; fi; }
webcam() { webcam='mplayer tv://0 -tv driver=v4l2 -fps 90 -zoom'; eval $webcam || eval $webcam -vo x11; }
utilities() { cd /tmp/; highlight -O ansi "$PK_LOAD_LINUX/notes.md" | less -R; cd -; }
calc() { /usr/bin/bc <<< "scale=${2:-2}; ${1:?nedd a expression to calculate}"; }
repeater() { for _ in `seq "$1"`; do eval "${@:2}"; done; }
percent-decode() { local IFS='+'; echo -e ${1//%/\\x}; }
count-char() { tr -dc "$1" <<< "${@:2}" | wc -m; }
count-string() { tr -d '\n' <<< "$1" | wc -m; }
calendar() { while IFS= read; do local output="$(printf '%*s%s' "$(((`tput cols`-64)/2))" '' "$REPLY")"; echo "$output"; done <<< "`ncal -by`"; }

ll() { local ROUTE=$([ "$#" -eq 0 ] && pwd || echo "$1"); ls -lhF --time-style=+%% --color=always "$ROUTE"; echo "count `ls -1 "$ROUTE" | wc -l`"; }
lla() { local ROUTE=$([ "$#" -eq 0 ] && pwd || echo "$1"); ls -lhAF --time-style=+%% --color=always "$ROUTE"; echo "count `ls -A1 "$ROUTE" | wc -l`"; }

# >>> Depreceated!
#readmd() { pandoc -f markdown "${1}" | lynx -stdin; }
#ae() { [ -f "${1}" ] && echo 'file exists' || echo 'file not exists'; }
#get-alias() { alias "$1" | sed -nE "s/^.*'(.*)'$/\1/p"; }

# Long's:
erase-history() {
	if ERASED_HISTORY=`tac <(tac "$HISTFILE" | awk '!x[$0]++') 2>&-`; then
		echo "$ERASED_HISTORY" > "$HISTFILE"
	fi
}

get-bindings() {
	echo '>>> i3 bindings!'
	sed -n '/my bindings/,$p' ~/.config/i3/config \
	| sed -nE 's/^.*(\$mod[^[:blank:]]+).+\$bind_suffix (.*)$/\1 » \2/p'
}

mychecking() {
	clear
	echo -e ">>> VERIFY FOR ROOT FILES!"
	find ~/ -user '0'
	echo -e "\n>>> VERIFY FOR .GIT FOLDERS!"
	find ~/ -type d -name '.git'
	echo -e "\n>>> GIT STATUS ALL!"
	ga 'git status'
	echo -e "\n>>> TREE IN HOME!"
	tree -FL 2 ~
	echo -e "\n>>> VERIFY FOR CONFLI, SWP AND TMP FILES!"
	find ~/ -not \( \
		-path '*/pCloudDrive' -prune -o \
		-path '*/.config/Code/CachedData' -prune -o \
		-path '*/.gradle/caches' -prune -o \
		-path '*/.go/pkg/mod' -prune -o \
		-path '*/.icons' -prune -o \
		-path '*/.local/share/Trash' -prune -o \
		-path '*/.steam/debian-installation' -prune -o \
		-path '*/.vscode/extensions' -prune -o \
		-path '*/8' -prune -o \
		-path '*/16' -prune -o \
		-path '*/22' -prune -o \
		-path '*/24' -prune -o \
		-path '*/misc/programming' -prune -o \
		-path '*/.gradle/.tmp' -prune -o \
		-path '*/.cache/typescript' -prune \
	\) \( -iname '*confli*' -o -name '*.swp' -o -name '*.tmp' \) \
	-not -name 'plugin-conflict.js'
	#-not -name 'other-file.any'
}

TOKEN() {
	local FROM="${1:?need to inform the abbreviation where}"
	which -s copyq && copyq disable
	read -sp 'Password: '
	gpg \
		--decrypt \
		--quiet \
		--batch \
		--passphrase "$REPLY" \
		"$PK_LOAD_CFGBKP/enkrypted/.nekot_$FROM.gpg" \
		2>&- \
	| sed -n '2p' \
	| xclip -selection clipboard -rmlastnl
	[[ ! "${PIPESTATUS[*]}" =~ [1-9]+ ]] && {
		echo 'SUCCESS!'
	} || {
		echo 'FAILURE!'
	}
	which -s copyq && copyq enable
	unset REPLY
}

twcm() {
	local MODE=${1:?need a mode to set}
	local FILE=${2:?need a file to create}
	[ -e "$FILE" ] && {
		echo "`basename "$0"`: file already exists"
		return 1
	} || {
		touch "$FILE" && chmod -v "$MODE" "$FILE"
	}
}

percent-encode() {
	local LENGTH="${#1}"
	for ((INDEX=0; INDEX<LENGTH; INDEX++)); do
		local CHAR="${1:INDEX:1}"
		case "$CHAR" in
			[a-zA-Z0-9.~_-]) echo -n "$CHAR";;
			*) printf '%%%02X' "'$CHAR";;
		esac
	done
}

string-reverse() {
	local MESSAGE="${1?need a string to reverse}"
	for index in `seq $(("${#MESSAGE}"-1)) -1 0`; do
		echo -n "${MESSAGE:$index:1}"
	done
}

hlct() {
	if [ $# -eq 1 ]; then
		local STMT="'`realpath "$1"`'"
	elif [ $# -eq 2 ]; then
		local STMT="--syntax $1 '`realpath "$2"`'"
	else
		echo "$0: error: need one or two args"
		exit 1
	fi
	cd /tmp/
	eval highlight -O ansi $STMT
	cd - >/dev/null
}

mkfl() {
	touch ./file-{1..4}.{txt,tmp}
	for folder in ./dir-{1..2}/sub-{a..c}/; do
		mkdir -p "$folder"
		touch "$folder"/file-{1..2}.off
	done
}

reverse-string() {
	local STRING="${1:?needs a string to reverse}"
	unset REVERSED
	for index in `seq 1 "${#STRING}"`; do
		REVERSED+="${STRING: -$index:1}"
	done
	tee '/dev/fd/2' <<< "$REVERSED" \
	| xclip -sel 'clip' -rmlastnl
}

outfind() {
	local LOG_FILE='/tmp/outfind.log'
	local COUNT_TIME='1'
	find / \( -path /proc -prune -o -path /sys -prune \) -o -iname "*$1*" >"$LOG_FILE" 2>&- &
	while (ps "$!" >/dev/null); do echo -ne "\rtime: ${COUNT_TIME}s"; let ++COUNT_TIME; sleep 1; done; echo ""
	less "$LOG_FILE"
}

# =============================================================================================

# >>> Advanced Git SetUp <<<

alias ggg="git-pretty 'git log --all --oneline --graph' $@"
alias ggl="git-pretty 'git log --all --oneline --patch' $@"
alias ggls="git-pretty 'git log --all --oneline' $@"
alias gglt="git-pretty 'git log --oneline origin/HEAD..HEAD' $@"

git-pretty() {
	local COMMAND=${1:?need a command to execute}
	local ARGS=${@:2}
	if [[ "$ARGS" =~ (-fq) ]]; then
		local ARGS=`sed "s/-fq/--pretty=format:'%C(auto)%h%d %C(bold)%C(blue)\"%C(reset)%s%C(bold)%C(blue)\"%C(reset) %C(cyan)%ar%C(reset) <%C(magenta)%an%C(reset)>'/" <<< "$ARGS"`
	elif [[ "$ARGS" =~ (-fh) ]];then
		local ARGS=`sed "s/-fh/--pretty=format:'%C(auto)%h%d %s %C(blue)-%C(reset) %C(cyan)%ar%C(reset) <%C(magenta)%an%C(reset)>'/" <<< "$ARGS"`
	fi
	eval "$COMMAND $ARGS"
	unset COMMAND ARGS
}

# =============================================================================================

# >>> History <<<

# Control variables:
HISTCONTROL=ignoreboth:erasedups
HISTSIZE=-1
HISTFILESIZE=10000

# =============================================================================================

# >>> Prompt <<<

# After command:
PROMPT_COMMAND='history -a'

# =============================================================================================

# >>> ToDo List (slackjeff) <<<

TODO="$HOME/Documents/annotations/.todo-list.txt"

rand() { unset RAND; while [ "${#RAND}" -lt '4' ]; do RAND="$(("$RANDOM"%10000))"; done; }
tlr() { sed -i "/${1:?need an id to remove}/d" "$TODO"; clear; tla; }
tla() { rand; [ "$#" -eq '0' ] && cat "$TODO" || echo "(`hostname`) $RAND » $*" >> "$TODO"; }

# =============================================================================================
