# =============================================================================================

# >>> My Default ~/.*rc Files <<<

# Standard set's.
set +o histexpand

# Import user shellrc.
[ -f "$HOME/.config/shellrc" ] && . "$HOME/.config/shellrc"

# =============================================================================================

# >>> Standard Aliases <<<

# Security.
alias sudo='sudo -k'

# First's.
alias cbfull='xclip -sel clip'
alias cb="xclip -sel clip -rmlastnl"

# Git.
alias ggb='cat <(git branch --color=always --list)'
alias ggr='git restore ./; git clean -f ./'
alias ggl='git log --all --oneline --patch'
alias ggg='git log --all --oneline --graph'
alias ggd='cat <(git diff --color=always)'
alias ggs='git status'
alias ggp='git pull origin `git branch --show-current`; git fetch --tags'

alias gglt='git log --oneline origin/HEAD..`git branch --show-current`'
alias ggbf='cat <(git branch --color=always --all -vv)'
alias ggba='cat <(git branch --color=always --all)'
alias ggsa='ga "git status"'
alias ggls='git log --all --oneline'
alias ggpa='ga -g'
alias ggra='ga "git restore ./"; ga "git clean -f ./"'

# Generals.
alias hsgp="history | sed -E 's/[[:blank:]]+[[:digit:]]+[[:blank:]]+//' | grep -iE"
alias rmll='shopt -s extglob; rm -rfv ./{.[^.]*,*}'
alias mkfld='mkdir -p ./dir_{1..2}/{a..c}/'
alias mkfl='touch ./file-{1..4}.{new,tmp}'
alias ips='ip -br -c address'
alias sb='source ~/.bashrc'
alias intrr='echo "$?"'
alias tmp='[ ! -d /tmp/tmp/ ] && { mkdir -pv /tmp/tmp/ && cd /tmp/tmp/; } || cd /tmp/tmp/'

alias default-montage='sudo mount -o rw,uid=`id -u`,gid=`id -g`'
alias opened-doors='sudo lsof -nPi | grep -F LISTEN'
alias external-ip="curl -fsSL http://ipecho.net/plain | sed 's/$/\n/'"

# Cli's.
alias lsblkf='lsblk --output=MODEL,STATE,TYPE,PATH,FSTYPE,LABEL,UUID'
alias lsblkd='lsblk --output=NAME,RO,RM,SIZE,MOUNTPOINTS'
alias dff='df --exclude-type=tmpfs --output=source,size,used,avail,pcent,target -h'

# Standards.
alias lls='ls --color=always -lhF'
alias grep='grep --color=always'
alias jq='jq -C'
alias rm='rm -i'
alias llt='ls --color=always -lhtcF'

# >>> Depreceated!
#alias rmallz='setopt extendedglob; rm -rfv ./(.|)*'
#alias pgcat='pygmentize -l'
#alias sz='source ~/.zshrc'
#alias vimz='vim ~/.zshrc'
#alias ctzh='hlct bash ~/.zshrc'
#alias vmbs='vim ~/.bashrc'
#alias ctbs='hlct bash ~/.bashrc'
#alias mktp='mktemp /tmp/XXXXXXXXXXXXXX.tmp'

# =============================================================================================

# >>> Functions <<<

# Short.
mkcd() { pathway="${1:?need a pathway to make and change to the directory!}"; mkdir -p "$pathway" && cd "$pathway"; pwd; }
ts() { [ "-b" != "$1" ] && lang=en:pt-br || { lang=pt-br:en; shift 1; }; trans -b "$lang" "`eval 'rs "$*"'`"; }
ggcb() { git branch --show-current 2>&-; }
insp() { eval "echo \${${1}}"; }
psgp() { pattern=${1:-need pattern to search!}; ps -xo pid,state,command | grep --color=always -iE "$pattern" | head -n -1; }

utilities() { cd /tmp/; highlight -O ansi "$PK_LOAD_LINUX/notes.md" | less -R; cd -; }
calc() { /bin/bc <<< "scale=${2:-2}; ${1:?nedd a expression to calculate!}"; }
repeater() { for _ in `seq "$1"`; do eval "${@:2}"; done; }
pick-alias() { alias "$1" | sed -nE "s/^.*'(.*)'$/\1/p"; }
diffstr() { if diff --color=always <(rs "$1") <(rs "$2"); then echo -e "\e[1;32;40mNo differences ✔\e[m"; fi; }

ll() { route=$([ $# -eq 0 ] && pwd || echo "$1"); ls -lhF --time-style=+%% --color=always "$route"; echo "count $(ls -1 $route | wc -l)"; }
lla() { route=$([ $# -eq 0 ] && pwd || echo "$1"); ls -lhAF --time-style=+%% --color=always "$route"; echo "count $(ls -A1 $route | wc -l)"; }

# >>> Depreceated!
#readmd() { pandoc -f markdown "${1}" | lynx -stdin; }
#ae() { [ -f "${1}" ] && echo 'file exists!' || echo 'file not exists!'; }

# Long.
TOKEN() {
	from=${1:?need to inform the abbreviation where!}
	toplip -d "$PK_LOAD_CFGBKP/enkrypted/.nekot_${from}.encrypted" | xclip -sel clip -rmlastnl
}

erase-history() {
	if erased_history=`tac <(tac "$HISTFILE" | awk '!x[$0]++') 2>&-`; then
		echo "$erased_history" > "$HISTFILE"
	fi
}

set-polybar-all() {
	{
		echo -e $'#!/bin/bash\nMONITOR=MERGE-1 polybar my-bar' | \
		tee /tmp/polybar.sh
	} && \
	chmod -v +x /tmp/polybar.sh && \
	killall polybar && \
	{
		echo 'success on killall!'
		sleep 3
		nohup /tmp/polybar.sh &
	} || \
	echo 'failed on killall!'
}

difftext() {
	if phrase=`wdiff <(rs "$1") <(rs "$2")`; then
		echo -e "\e[1;32;40mNo differences ✔\e[m"
	else
		colordiff <<< "$phrase" | sed -E 's/\[-|-\]|\{\+|\+\}//g'
	fi
}

mychecking() {
	clear
	ga "git status"
	tree -FL 2 ~
	find ~/ -not \( \
		-path '*/pCloudDrive' -prune -o \
		-path '*/.config/Code/CachedData' -prune -o \
		-path '*/.gradle/caches' -prune -o \
		-path '*/.go/pkg/mod' -prune -o \
		-path '*/.icons' -prune -o \
		-path '*/.local/share/Trash' -prune -o \
		-path '*/.steam/debian-installation' -prune -o \
		-path '*/.vscode/extensions' -prune -o \
		-path '*/misc/programming' -prune \
	\) -iname '*confli*'
}

twcm() {
	mode=${1:?need a mode to set!}
	file=${2:?need a file to create!}
	[ -e "$file" ] && {
		echo "`basename "$0"`: file already exists!"
		return 1
	} || {
		touch "$file" && chmod -v "$mode" "$file"
	}
}

hlct() {
	cd /tmp/
	if [ $# -eq 1 ]; then
		highlight -O ansi "$1"
	elif [ $# -eq 2 ]; then
		highlight -O ansi --syntax $1 "$2"
	else
		echo 'hlct: error: need one or two args!'
		exit 1
	fi
	cd - >/dev/null
}

outfind() {
	tmp_find_path=/tmp/output_find.tmp
	f_time=1
	find / \( -path /proc -prune -o -path /sys -prune \) -o -iname "*${1}*" >"$tmp_find_path" 2>&- &
	while (ps "$!" >/dev/null); do sleep 1; echo -ne "\rtime: ${f_time}s"; let ++f_time; done; echo ""
	less "$tmp_find_path"
}

# =============================================================================================

# >>> History <<<

# Control variables.
HISTCONTROL=ignoreboth:erasedups
HISTSIZE=-1
HISTFILESIZE=10000

# =============================================================================================

# >>> Prompt <<<

# After command.
PROMPT_COMMAND='history -a'

# =============================================================================================

# >>> Misc Variables <<<

# Noti channels.
NOTI_DEFAULT='banner slack telegram'

# =============================================================================================

# >>> ToDo List (SlackJeff) <<<

TODO=$HOME/Documents/annotations/.todo-list.txt

rand() { RAND=0; while [ "${#RAND}" -lt 4 ]; do RAND=$(("$RANDOM"%10000)); done; }
tlr() { sed -i "/${1:?need an id to remove!}/d" "$TODO"; clear; tla; }
tla() { rand; [ "$#" -eq 0 ] && cat "$TODO" || echo "(`hostname`) $RAND » $*" >> "$TODO"; }

# =============================================================================================
