# =============================================================================================

# >>> my default ~/.*rc file !

# standard set's.
set +o histexpand

# the perfect home.
home=${HOME:-"/home/${USER:-`whoami`}"}

# import user shellrc.
user_shell_rc=${home}/.config/shellrc
[ -f $user_shell_rc ] && . $user_shell_rc

# =============================================================================================

# >>> standard aliases !

# security.
alias sudo='sudo -k'

# first.
alias cbfull='xclip -selection clipboard'
alias cb="tr -d '\n' | xclip -selection clipboard"

# git.
alias ggb='cat <(git branch --color=always --list)'
alias ggr='git restore ./; git clean -f ./'
alias ggl='git log --all --oneline --patch'
alias ggg='git log --all --oneline --graph'
alias ggd='cat <(git diff --color=always)'
alias ggs='git status'
alias ggp='git pull origin `git branch --show-current`; git fetch --tags'
alias ggbf='cat <(git branch --color=always --all -vv)'
alias ggba='cat <(git branch --color=always --all)'
alias ggsa='push_script "git status"'
alias ggls='git log --all --oneline'
alias ggpa='push_script -g'
alias ggra='push_script "git restore ./"; push_script "git clean -f ./"'

# generals.
alias external_ip="curl -fsSL http://ipecho.net/plain | sed 's/$/\n/'"
alias catb='cd /tmp/; highlight -O ansi --syntax bash ~/.bashrc; cd -'
alias default_montage='sudo mount -o rw,uid=`id -u`,gid=`id -g`'
alias rmallb='shopt -s extglob; rm -rfv ./{.[^.]*,*}'
alias opened_doors='sudo lsof -nPi | grep -F LISTEN'
alias mkfiled='mkdir -p ./dir_{1..2}/{a..c}/'
alias mkfile='touch ./file-{1..4}.{new,tmp}'
alias mktf='mktemp /tmp/XXXXXXXXXXXXXX.tmp'
alias hsgp='history | grep -iF'
alias hlct='highlight -O ansi'
alias ips='ip -br -c address'
alias sb='source ~/.bashrc'
alias vimb='vim ~/.bashrc'
alias intrr='echo $?'
alias hs='history -r'
alias ha='history -a'
alias tmp='[ ! -d /tmp/tmp/ ] && { mkdir -pv /tmp/tmp/ && cd /tmp/tmp/ ;} || cd /tmp/tmp/'

# cli's.
alias lsblkf='lsblk --output=MODEL,STATE,TYPE,PATH,FSTYPE,LABEL,UUID'
alias lsblkd='lsblk --output=NAME,RO,RM,SIZE,MOUNTPOINTS'
alias dff='df --exclude-type=tmpfs --output=source,size,used,pcent,avail,target -h'

# standards.
alias lls='ls --color=always -lhF'
alias grep='grep --color=always'
alias mkdir='mkdir -pv'
alias chmod='chmod -v'
alias less='less -R'
alias jq='jq -C'
alias ln='ln -v'
alias rm='rm -i'
alias llt='ls --color=always -lhtcF'

# depreceated.

# alias rmallz='setopt extendedglob; rm -rfv ./(.|)*'
# alias pgcat='pygmentize -l'
# alias sz='source ~/.zshrc'
# alias vimz='vim ~/.zshrc'
# alias catz='cd /tmp/; highlight -O ansi --syntax bash ~/.zshrc; cd -'

# =============================================================================================

# >>> functions !

# short.
diffstr() { if diff --color=always <(rtstr "${1}") <(rtstr "${2}"); then echo -e "\e[1;32;40mNo differences ✔\e[m"; fi; }
mkcd() { pathway="${1:?need a pathway to make and change to the directory!}"; mkdir -p $pathway && cd ${pathway}; pwd; }
pick_alias() { alias "${1}" | cut -d '=' -f 2- | sed -E 's/^.{1}|.{1}$//g'; }
utilitarios() { cd /tmp/; hlct ${PK_LOAD_LINUX}/notes.md | less -R; cd -; }
ytsbr() { trans -b pt-br:en "`eval 'rtstr "${*}"'`"; }
yts() { trans -b en:pt-br "`eval 'rtstr "${*}"'`"; }
ggcb() { git branch --show-current 2>&-; }
insp() { eval "echo \${${1}}"; }
psgp(){ pattern=${1:-need pattern to search!}; ps -xo pid,state,command | grep --color=always -iF "${pattern}" | head -n -1; }

ll() { route=$([ $# -eq 0 ] && pwd || echo ${1}); ls -lhF --time-style=+%% --color=always ${route}; echo "count $(ls -1 ${route} | wc -l)"; }
lla() { route=$([ $# -eq 0 ] && pwd || echo ${1}); ls -lhAF --time-style=+%% --color=always ${route}; echo "count $(ls -A1 ${route} | wc -l)"; }

# depreceated (short).

#readmd() { pandoc -f markdown "${1}" | lynx -stdin; }
#ae() { [ -f "${1}" ] && echo 'file exists!' || echo 'file not exists!'; }

# long.
outfind() {
	tmp_find_path=/tmp/output_find.tmp
	f_time=1
	find / \( -path /proc -prune -o -path /sys -prune \) -o -iname "*${1}*" >${tmp_find_path} 2>&- &
	while (ps ${!} >/dev/null); do sleep 1; echo -ne "\rtime: ${f_time}s"; let ++f_time; done; echo
	less ${tmp_find_path}
}

TOKEN() {
	from=${1:?need to inform the abbreviation where!}
	toplip -d ${PK_LOAD_CFGBKP}/enkrypted/.nekot_${from}.encrypted | xclip -sel clip -rmlastnl
}

set_polybar_all() {
	{
		echo -e $'#!/bin/bash\nMONITOR=MERGE-1 polybar my-bar' | \
		tee /tmp/polybar.sh
	} && \
	chmod -v +x /tmp/polybar.sh && \
	killall polybar && \
	{
		echo 'success on killall!'
		sleep 3
		nohup /tmp/polybar.sh &
	} || \
	echo 'failed on killall!'
}

difftext() {
	local phrase
	if phrase=`wdiff <(rtstr "${1}") <(rtstr "${2}")`; then
		echo -e "\e[1;32;40mNo differences ✔\e[m"
	else
		colordiff <<< $phrase | sed -E 's/\[-|-\]|\{\+|\+\}//g'
	fi
}

twch() {
	mode=${1:?need a mode to set!}
	file=${2:?need a file to create!}
	[ -e "${file}" ] && {
		echo "`basename "${0}"`: file already exists!"
		return 1
	} || {
		touch "${file}" && chmod -v "${mode}" "${file}"
	}
}

erease_history() {
	if erased_history=`awk '!x[$0]++' $HISTFILE 2>&-`; then
		echo "${erased_history}" > $HISTFILE
	fi
}

mychecking() {
	clear
	ggsa
	tree -FL 2 ~
	find ~/ -not \( \
		-path '*/pCloudDrive' -prune -o \
		-path '*/.icons' -prune -o \
		-path '*/.go/pkg/mod' -prune -o \
		-path '*/others/programming/ides' -prune -o \
		-path '*/.config/Code/CachedData' -prune -o \
		-path '*/.local/share/Trash/files' -prune \
	\) -iname '*confli*'
}

# long (for print).
print_unix_classes() {
	cat <<- \EOF
		--------------------------------------------------------------------------------------
		Classes
		[[:alnum:]] ------ Alfabéticos e númericos [a-z A-Z 0-9].
		[[:alpha:]] ------ Alfabéticos [a-z A-Z].
		[[:blank:]] ------ Caractere em branco, espaço ou tab [\t].
		[[:cntrl:]] ------ Caracteres de controle [\x00-\x1F-\x7F].
		[[:digit:]] ------ Números [0-9].
		[[:graph:]] ------ Qualquer caractere visível (ou seja, exceto em branco) [\x20-\x7E].
		[[:lower:]] ------ Letras minúsculas [a-z].
		[[:upper:]] ------ Letras maiúsculas [A-Z].
		[[:print:]] ------ Caracteres visíveis (ou seja, exceto os de controle) [\x20-\x7E].
		[[:punct:]] ------ Pontuação [-!"#$%&'()*+,./:;?@[\\\]_{|}~].
		[[:space:]] ------ Espaço em branco [\t\r\n\v\f].
		[[:xdigit:]] ----- Número hexadecimais [0-9 a-f A-F].
		--------------------------------------------------------------------------------------
		Abreviações
		[[:digit:]] ------ \d.
		[[:alnum:]] ------ \w.
		[[:space:]] ------ \s.
		--------------------------------------------------------------------------------------
	EOF
}

print_array_expasion() {
	cat <<- \EOF
		---------------------------------------------------------------------------------
		${var[@]} ----------- Imprime todos os elementos do array em strings protegidas.
		${var[*]} ----------- Imprime todos os elementos do array em uma única expressão.
		${var[P]} ----------- Imprime o elemento na posição ‘P’.
		${#var[@]} ---------- Imprime o total de elementos do array.
		${!var[@]} ---------- Imprime os índices do array.
		${var[@]:N} --------- Imprime todos os elementos a partir da posição ‘N’.
		${var[@]:N:M} ------- Imprime ‘M’ elementos a partir da posição ‘N’.
		${var[@]: -N} ------- Imprime os últimos ‘N’ elementos.
		${var[@]: -N:M} ----- Imprime ‘M’ elementos a partir da última ‘N’ posição.
		---------------------------------------------------------------------------------
	EOF
}

print_extglob_bash() {
	cat <<- \EOF
		------------------------------------------------------------------------
		?(padrão) .....: Corresponde a uma ocorrência do padrão.
		*(padrão) .....: Corresponde a qualquer número de ocorrências do padrão.
		+(padrão) .....: Corresponde a pelo menos uma ocorrência do padrão.
		@(padrão) .....: Corresponde exatamente a uma ocorrência do padrão.
		!(padrão) .....: Corresponde a tudo, exceto o padrão.
		------------------------------------------------------------------------
	EOF
}

print_extglob_zsh() {
	cat <<- \EOF
		--------------------------------------------------
		^foobar ........: Nega o padrão.
		^(foo|bar) .....: Nega os padrões.
		foo~bar ........: Aceita "foo" e nega "bar".
		(foo)# .........: Zero ou mais ocorrências de foo.
		(foo)## ........: Uma ou mais ocorrências de foo.
		--------------------------------------------------
	EOF
}

print_unix_signals() {
	cat <<- \EOF
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------
		POSIX signals
		'01' (SIGHUP) ....: terminal do processo foi desconectado ou o processo encerrado (alguns deamons usam esse sinal para recarregar as configurações do processo).
		'02' (SIGINT) ....: interrompe o processo e aguarda o próximo comando do usuário,lançado no ctrl+c.
		'03' (SIGQUIT) ...: força o core dumped do processo e o termina, lançado no ctrl+\.
		'05' (SIGTRAP) ...: enviado esse sinal para o processo quando ocorre uma exceção ou quando cai numa trap.
		'09' (SIGKILL) ...: quando enviado ao processo causa seu encerramente imediato, diferentemente do SIGTERM e SIGINT esse sinal não pode ser capturado ou ignorado.
		'15' (SIGTERM) ...: quando enviado ao processo causa seu encerramento, porém, pode ser capturado ou ignorado pelo processo.
		'18' (SIGCONT) ...: enviado esse sinal para que o processo "reinicie", volte ao estado de running depois de SIGSTOP ou SIGTSTP.
		'19' (SIGSTOP) ...: quando enviado, o processo é pausado pelo sistema para ser resumido futuramente e pode apenas receber os sinais SIGKILL e SIGCONT.
		'20' (SIGTSTP) ...: sua diferença para o SIGSTOP é que quando pausado o processo ainda pode manipulado, lançado no ctrl+z.
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------
		Processes States
		'D' (UNINTERRUPTABLE_SLEEP) ...: processo dorme e aguarda alguma entrada, nesse estado se interrompido pode causar problemas.
		'R' (RUNNING & RUNNABLE) ......: processo está compra para ser executado ou já está em execução.
		'S' (INTERRRUPTABLE_SLEEP) ....: processo dorme e aguarda alguma entrada, nesse estado "pode ser" interrompido com segurança.
		'T' (STOPPED) .................: processo está pausado porém ainda pode ser manipulado ou resumido (ctrl+z » SIGTSTP).
		'Z' (ZOMBIE) ..................: processo que foi encerrado porém ainda está na tabela de processos, significa que ainda pode estar finalizando alguma atividade.
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------
	EOF
}

# =============================================================================================

# >>> prompt_command set up !

# function.
#prompt_function() {

	# > git set up <

	# seta a branch do repositório local.
	#ggcb

	# > history set up <

	# coloca o último comando executado na sessão no $HISTFILE.
	#builtin history -a

	# lima o historico da sessão atual.
	#builtin history -c

	# appenda o $HISTFILE na lista de historico da sessão atual.
	#builtin history -r

	# remove linhas duplicadas do $HISTFILE.
	#erease_history

#}

# set up.
#PROMPT_COMMAND=prompt_function

# =============================================================================================

# >>> history !

# control variables.
HISTCONTROL=ignoreboth
HISTSIZE=7220
HISTFILESIZE=${HISTSIZE}

# =============================================================================================

# >>> misc variables !

# noti channels.
NOTI_DEFAULT='banner slack telegram'

# =============================================================================================

# >>> ToDo List (SlackJeff) !

TODO=${home}/Documents/anotacoes/.todo_list.txt

rand() { RAND=0; while [ ${#RAND} -lt 4 ]; do RAND=$((${RANDOM}%10000)); done; }
tlr() { sed -i "/${1:?need an id to remove!}/d" ${TODO}; clear; tla; }
tla() { rand; [ $# -eq 0 ] && cat "${TODO}" || echo "(`hostname`) $RAND » ${*}" >> ${TODO}; }

# =============================================================================================
