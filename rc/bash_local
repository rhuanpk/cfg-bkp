# >>> Aliases <<<

# general
alias cdlx='cd $PATH_LINUX'
alias cdbk='cd $PATH_CFGBKP'

# docker
alias docker-ps="docker ps -a --format 'table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}'"
#alias docker-remove-all-containers='docker rm -f `docker container ls -aq`'
#alias docker-remove-all-volumes='docker volume rm `docker volume ls -q`'
#alias docker-service="docker service ls --format 'table {{.ID}}\t{{.Name}}\t{{.Mode}}\t{{.Replicas}}\t{{.Ports}}'"

# golang
alias go-run="clear; go run -ldflags '-s -w' ./"

# >>> Functions <<<

# git
#git-submodule-recreate() {
#	sed -nE 's/^[[:blank:]]+path = (.*)/\1/p' ./.gitmodules | \
#		xargs rm -rf && \
#	git submodule init && \
#	git submodule update --remote
#}

#git-submodule-setbranch() {
#	branch="${1:-main}"
#	for submodule in `sed -nE 's/\[submodule "(.*)"\]/\1/p' ./.gitmodules`; do
#		git submodule set-branch --branch $branch "${submodule}"
#	done
#}

# docker
#docker-copy-volume() {
#	[ "${UID:-`id -u`}" -ne '0' ] && local sudo='sudo'
#	local old_volume="${1:?arg 1 must be the old volume}"
#	local new_volume="${1:?arg 2 must be the new volume}"
#	local volume_path='/var/lib/docker/volumes'
#	docker volume create "$new_volume"
#	$sudo cp -afv "$volume_path"/"$old_volume"/_data/ "$volume_path"/"$new_volume"/
#}

#docker-list-all() {
#	commands='image container volume network service'
#	for command in $commands; do
#		echo -e "\n » $command «\n"; docker $command ls;
#	done
#}

#docker-remove-dangling-volumes() {
#	for volume in `docker volume ls -qf dangling=true`; do
#		rm -rf /var/lib/docker/volumes/"$volume"
#	done
#}

#docker-remove-dangling-images() {
#	docker image rm -f $(
#		docker images -af 'dangling=true' | \
#			grep -F '<none>' | \
#			awk '{print $3}'
#	)
#}

docker-ip() {
	container="${1:?need container name}"
	docker inspect -f 'Main IP: {{if .NetworkSettings.IPAddress}}{{.NetworkSettings.IPAddress}}{{else}}N/A{{end}}{{"\n"}}{{if .NetworkSettings.Networks}}Networks:{{"\n"}}{{range $key, $value := .NetworkSettings.Networks}}- {{$key}}: {{if $value.IPAddress}}{{$value.IPAddress}}{{else}}N/A{{end}}{{"\n"}}{{end}}{{end}}' "$container" | sed '$d'
}

# golang
gps() {
	: ${1:?need a path to setup}
	local path="${1%/}"
	[ -d "$path" ] && {
		read -p "warn: remove ${path@Q}? [y/N] "
		[ "${REPLY,,}" != 'y' ] && return
	}
	{
		rm -rfv "$path/" \
		&& mkdir -pv "$path/" \
		&& cd "$path/"
	} || return
	cat <<- eof > ./main.go
		package main

		func main() {

		}
	eof
	go mod init "$(basename "$path")"
	echo "pwd: `pwd`"
}
