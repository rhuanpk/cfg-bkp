
##################################################################################################################
#
# source ~/Documents/git/cfg-bkp/rc/zbashrc
#
# export NOTI_DEFAULT="banner telegram slack"
#
# zsh: setopt extendedglob
# bash: shopt -s extglob
#
# >>> Wallpaper <<<
# feh --bg-scale ~/Pictures/wallpaper/wallpaper.png
#
# >>> Color Pallet <<<
# cat ~/.cache/current-palette
#
##################################################################################################################

# >>> Unset Alias'es <<<

aliases_array=(ll lla ggb ggl ggd ggs ggr ggp ggsa ggpa)
for index in ${aliases_array[@]}; do
	if alias ${index} >/dev/null 2>&1; then unalias ${index}; fi
done

# >>> Standard Aliases <<<

alias lll='ll --literal'
alias llla='lla --literal'

alias c='xclip'
alias v='xclip -o'
alias cb="tr -d '\n' | xclip -selection clipboard"

alias ggb='git branch -l --color | cat'
alias ggl='git log --all --oneline --patch'
alias ggd='git diff --color | cat'
alias ggs='git status'
alias ggr='git restore .'
alias ggp='git pull origin $(git branch --show-current)'
alias ggsa='pk-push_script "git status"'
alias ggpa='pk-push_script "git pull origin master"'

alias insp='viewvar ${1}'
alias sz='source ~/.zshrc'
alias sb='source ~/.bashrc'
alias vimz='vim ~/.zshrc'
alias vimb='vim ~/.bashrc'
alias catz='cat ~/.zshrc'
alias catb='cat ~/.bashrc'
alias horas='date +%T'
alias intrr='echo "${?}"'
alias tmp='[ ! -d /tmp/tmp ] && { mkdir -v /tmp/tmp && cd /tmp/tmp ;} || cd /tmp/tmp'
alias mkfile='touch file-{1..4}.{txt,md,new,tmp}'
alias mkfiled='mkdir -p dir_{1..2}/{a..c}'
alias TOKEN="toplip -d /home/${USER}/Documents/git/cfg-bkp/enkrypted/nekot.txt | tr -d '\n' | xclip -selection clipboard"
alias default_montage='sudo mount -o rw,uid=$(id -u),gid=$(id -g)'
alias mychecking='clear; ggsa; tree -FL 2 ~; find ~/ -path ~/pCloudDrive -prune -o -iname "*confli*"'
alias rmallz='setopt extendedglob; rm -rfv ./(.|)*'
alias rmallb='shopt -s extglob; rm -rfv ./{.[^.]*,*}'

alias pgcat='pygmentize -l'
alias hlcat='highlight -O ansi'

# >>> Standard Functions <<<

viewvar() { eval echo "\${${1}}" ;}
translate() { trans -b en:pt-br "${*}" ;}
translatebr() { trans -b pt-br:en "${*}" ;}
translatef() { trans -b en:pt-br -i "${1}" ;}
translatebrf() { trans -b pt-br:en -i "${1}" ;}
readmd() { pandoc -f markdown "${1}" | lynx -stdin ;}
pick_alias() { alias "${1}" | cut -d '=' -f 2 | tr -d "'" ;}
ae() { [ -e "${1}" ] && echo "Arquivo existe!" || echo "Arquivo não existe!" ;}
diffstr() { if diff <(echo "${1}") <(echo "${2}"); then echo -e "\e[1;32;40mNo differences ✔\e[m"; fi ;}

# >>> Standard Unalias/Functions <<<

ll() { route=$([ ${#} -eq 0 ] && pwd || echo ${1}); ls -lhF --time-style=+%% --color ${route}; echo "count $(ls -1 ${route} | wc -l)" ;}
lla() { route=$([ ${#} -eq 0 ] && pwd || echo ${1}); ls -lhAF --time-style=+%% --color ${route}; echo "count $(($(ls -a1 ${route} | wc -l)-2))" ;}

# =============================================================================================

# ToDo List (SlackJeff)

export TODO="${HOME}/Documents/anotacoes/.todo_list.txt"

rand() { RAND=0; while [ ${#RAND} -lt 4 ]; do RAND=$((${RANDOM}%10000)); done ;}
tla() { rand; [ ${#} -eq 0 ] && cat "${TODO}" || echo "($(hostname)) ${RAND} » ${*}" >> ${TODO} ;}
tlr() { hostname=$(hostname); sed -i "/^(${hostname}) ${1}/d" ${TODO}; clear; tla ;}

# =============================================================================================

# >>> Standard Long Functions !

utilitarios() {
	file=$(find ~/ -name 'comandos_uteis.md' | grep -F comandos-linux | grep -viE '(pclouddrive|others)')
	hlcat $file | less
}

comment_structure() {
	echo -e "\
		\r# ********** Declaração de Funções **********\n\
		\r# ********** Declaração de Variáveis **********\n\
		\r# ********** Início do Programa **********\
	" | xclip -selection clipboard
}

repita() {
	time=1
	[ ${#} -eq 0 ] && command='ls -lhF --color' || {
		[ ${#} -eq 1 ] && command="${1}" || {
			command="${1}"
			time=${2}
		}
	}
	while :; do sleep ${time}; clear; eval ${command}; done
}

container_reboot() {
	echo '---ENCERRANDO CONTAINER---'
	docker stop "${1}" &&
	sleep 1
	docker ps -a &&
	echo '---INICIANDO CONTAINER---'
	docker start "${1}" &&
	sleep 1
	docker ps -a
}

outfind() {
	tmp_find_path=/tmp/output_find.tmp
	f_time=1
	find / \( -path /proc -prune -o -path /sys -prune \) -o -iname "*${1}*" >${tmp_find_path} 2>&- &
	while (ps ${!} >/dev/null); do sleep 1; echo -ne "\rtime: ${f_time}s"; let ++f_time; done; echo
	less ${tmp_find_path}
}

add_ln_nxt() {
	[ ! "$(basename ${0})" = 'bash' ] && {
		echo -e "\e[40;31;1m>>> Logue numa sesão BASH !\e[m"
	} || {
		index=0
		expression="${1}"
		file="${2}"
		for i in $(egrep -n "${expression}" "${file}" | cut -d ':' -f '1'); do
			lines_arr[${index}]=${i}
			let ++index
		done && {
			line=0
			for i in ${lines_arr[@]}; do
				next_line=$((${i}+${line}))
				line_content=$(sed -n "${next_line}p" "${file}")
				sed -i "${next_line}s/.*/${line_content}\n/" "${file}"
				let ++line
			done
		}
	}
}

rm_nxt_blnk_ln() {
	line=1
	file="${1}"
        while :; do
		next_line=$((${line}+1))
		lines_total=$(wc -l ${file} | cut -d ' ' -f '1')
		[ ${line} -eq ${lines_total} ] && break || {
			[ "$(sed -n ${line}p ${file})" = "" ] && {
				[ "$(sed -n ${next_line}p ${file})" = "" ] && {
					sed -i "${next_line}d" "${file}"
				}
			}
		}
		let ++line
	done
}

print_regex_classes() {
	cat <<- EOF
		------------------------------------------------------------------------------------
		Classes
		[[:alnum:]] ------ Alfabéticos e númericos [a-z A-Z 0-9]
		[[:alpha:]] ------ Alfabéticos [a-z A-Z]
		[[:blank:]] ------ Caractere em branco, espaço ou tab [ \t]
		[[:cntrl:]] ------ Caracteres de controle [\x00-\x1F\x7F]
		[[:digit:]] ------ Números [0-9]
		[[:graph:]] ------ Qualquer caractere visível(ou seja, exceto em branco) [\x20-\x7E]
		[[:lower:]] ------ Letras minúsculas [a-z]
		[[:upper:]] ------ Letras maiúsculas [A-Z]
		[[:print:]] ------ Caracteres visíveis (ou seja, exceto os de controle) [\x20-\x7E]
		[[:punct:]] ------ Pontuação [-!"#$%&'()*+,./:;?@[\\\]_{|}~].
		[[:space:]] ------ Espaço em branco [ \t\r\n\v\f]
		[[:xdigit:]] ----- Número hexadecimais [0-9 a-f A-F]
		------------------------------------------------------------------------------------
		Abreviações
		[[:digit:]] ------ \d
		[[:alnum:]] ------ \w
		[[:space:]] ------ \s
		------------------------------------------------------------------------------------
	EOF
}

print_array_expasion() {
	cat <<- EOF
		----------------------------------------------------------------------------------
		\${var[@]} ----------- Imprime todos os elementos do array em strings protegidas.
		\${var[*]} ----------- Imprime todos os elementos do array em uma única expressão.
		\${var[P]} ----------- Imprime o elemento na posição ‘P’.
		\${#var[@]} ---------- Imprime o total de elementos do array.
		\${!var[@]} ---------- Imprime os índices do array.
		\${var[@]:N} --------- Imprime todos os elementos a partir da posição ‘N’.
		\${var[@]:N:M} ------- Imprime ‘M’ elementos a partir da posição ‘N’.
		\${var[@]: -N} ------- Imprime os últimos ‘M’ elementos.
		\${var[@]: -N:M} ----- Imprime ‘M’ elementos a partir da última ‘N’ posição.
		----------------------------------------------------------------------------------
	EOF
}

print_extglob_bash() {
	cat <<- EOF
		-----------------------------------------------------------------------
		?(padrão) .....: Corresponde a uma ocorrência do padrão
		*(padrão) .....: Corresponde a qualquer número de ocorrências do padrão
		+(padrão) .....: Corresponde a pelo menos uma ocorrência do padrão
		@(padrão) .....: Corresponde exatamente a uma ocorrência do padrão
		!(padrão) .....: Corresponde a tudo, exceto o padrão
		-----------------------------------------------------------------------
	EOF
}

print_extglob_zsh() {
	cat <<- EOF
		-------------------------------------------------
		^foobar ........: Nega o padrão
		^(foo|bar) .....: Nega os padrões
		foo~bar ........: Aceita "foo" e nega "bar"
		(foo)# .........: Zero ou mais ocorrências de foo
		(foo)## ........: Uma ou mais ocorrências de foo
		-------------------------------------------------
	EOF
}

# =============================================================================================

