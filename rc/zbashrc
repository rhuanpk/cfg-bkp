# =============================================================================================

# >>> Standard set's <<<

# disable history expansion e.g.: !722.
set +o histexpand

# =============================================================================================

# >>> The ultimate home <<<

home=${HOME:-"/home/${USER:-$(whoami)}"}

# =============================================================================================

# >>> Standard aliases <<<

alias cbfull='xclip -selection clipboard'
alias cb="tr -d '\n' | xclip -selection clipboard"

alias ggb='cat <(git branch --color --list)'
alias ggr='git restore ./; git clean -f ./'
alias ggl='git log --all --oneline --patch'
alias ggd='cat <(git diff --color)'
alias ggs='git status'
alias ggp='git pull origin $(git branch --show-current); git fetch --tags'
alias ggba='cat <(git branch --color --all)'
alias ggsa='push_script "git status"'
alias ggls='git log --all --oneline'
alias ggpa='push_script -g'
alias ggra='push_script "git restore ./"; push_script "git clean -f ./"'

alias tmp='[ ! -d /tmp/tmp ] && { mkdir -v /tmp/tmp && cd /tmp/tmp ;} || cd /tmp/tmp'
alias external_ip="curl -fsSL http://ipecho.net/plain | sed 's/$/\n/'"
alias default_montage='sudo mount -o rw,uid=$(id -u),gid=$(id -g)'
alias rmallb='shopt -s extglob; rm -rfv ./{.[^.]*,*}'
alias rmallz='setopt extendedglob; rm -rfv ./(.|)*'
alias mkfile='touch file-{1..4}.{txt,md,new,tmp}'
alias mktf='mktemp /tmp/XXXXXXXXXXXXXX.tmp'
alias mkfiled='mkdir -p dir_{1..2}/{a..c}'
alias hlcat='highlight -O ansi'
alias ips='ip -br -c address'
#alias pgcat='pygmentize -l'
alias sb='source ~/.bashrc'
alias sz='source ~/.zshrc'
alias vimb='vim ~/.bashrc'
alias catb='cat ~/.bashrc'
alias vimz='vim ~/.zshrc'
alias catz='cat ~/.zshrc'
alias insp='viewvar ${1}'
alias intrr='echo "${?}"'
alias TOKEN="toplip -d ${home}/Documents/git/cfg-bkp/enkrypted/nekot.txt | tr -d '\n' | xclip -selection clipboard"

alias lsblkd='lsblk --output=MODEL,STATE,TYPE,PATH,FSTYPE,LABEL,UUID'
alias lsblkf='lsblk --output=NAME,RO,RM,SIZE,MOUNTPOINTS'
alias dff='df --exclude-type=tmpfs --output=source,size,used,pcent,avail,target -h'

alias sudo='sudo -k'

alias lls='ls --color=always -lhF'
alias grep='grep --color=always'
alias mkdir='mkdir -pv'
alias chmod='chmod -v'
alias less='less -R'
alias jq='jq -C'
alias llt='ls --color=always -lhtcF'

# =============================================================================================

# >>> Standard Short Functions <<<

rlbc() { file="${1}"; [ -z $file ] && echo 'needs a file to execute!' || sed -Ei 's/[[:blank:]]+$//g' "${file}"; }
diffstr() { if diff <(rtstr "${1}") <(rtstr "${2}"); then echo -e "\e[1;32;40mNo differences ✔\e[m"; fi; }
pick_alias() { alias "${1}" | cut -d '=' -f 2- | sed -E 's/^.{1}|.{1}$//g'; }
utilitarios() { cd /tmp/; hlcat ${PK_LOAD_LINUX}/annotations.md | less -R; }
#ae() { [ -f "${1}" ] && echo 'file exists!' || echo 'file not exists!'; }
#readmd() { pandoc -f markdown "${1}" | lynx -stdin; }
ytsbr() { trans -b pt-br:en "$(rtstr ${1})"; }
yts() { trans -b en:pt-br "$(rtstr ${1})"; }
viewvar() { eval echo "\${${1}}"; }
psgrep(){ pattern=${1:-need pattern to search!}; ps -xo pid,state,command | grep -iF --color=always "${pattern}" | head -n -1; }

ll() { route=$([ $# -eq 0 ] && pwd || echo ${1}); ls -lhF --time-style=+%% --color ${route}; echo "count $(ls -1 ${route} | wc -l)"; }
lla() { route=$([ $# -eq 0 ] && pwd || echo ${1}); ls -lhAF --time-style=+%% --color ${route}; echo "count $(ls -A1 ${route} | wc -l)"; }

# >>> Standard Long Functions <<<

twch() {
	mode=${1:?need a mode to set!}
	file=${2:?need a file to create!}
	[ -e "${file}" ] && {
		echo "$(basename ${0}): file already exists!"
		return 1
	} || {
		touch "${file}" && chmod -v "${mode}" "${file}"
	}
}

difftext() {
	local phrase
	if phrase=$(wdiff <(rtstr "${1}") <(rtstr "${2}")); then
		echo -e "\e[1;32;40mNo differences ✔\e[m"
	else
		colordiff <<< $phrase | sed -E 's/\[-|-\]|\{\+|\+\}//g'
	fi
}

outfind() {
	tmp_find_path=/tmp/output_find.tmp
	f_time=1
	find / \( -path /proc -prune -o -path /sys -prune \) -o -iname "*${1}*" >${tmp_find_path} 2>&- &
	while (ps ${!} >/dev/null); do sleep 1; echo -ne "\rtime: ${f_time}s"; let ++f_time; done; echo
	less ${tmp_find_path}
}

mychecking() {
	clear
	ggsa
	tree -FL 2 ~
	find ~/ -iname '*confli*' | sed -E '/(\.icons|\.themes|\.private|pCloudDrive|Code\/CachedData|share\/Trash|\.go\/pkg)/d'
}

set_polybar_all() {
	{
		echo -e $'#!/bin/bash\nMONITOR=MERGE-1 polybar my-bar' | \
		tee /tmp/polybar.sh
	} && \
	chmod -v +x /tmp/polybar.sh && \
	killall polybar && \
	{
		echo 'success on killall!'
		sleep 3
		nohup /tmp/polybar.sh &
	} || \
	echo 'failed on killall!'
}

# >>> Printer long functions <<<

print_unix_classes() {
	cat <<- \EOF
		--------------------------------------------------------------------------------------
		Classes
		[[:alnum:]] ------ Alfabéticos e númericos [a-z A-Z 0-9].
		[[:alpha:]] ------ Alfabéticos [a-z A-Z].
		[[:blank:]] ------ Caractere em branco, espaço ou tab [\t].
		[[:cntrl:]] ------ Caracteres de controle [\x00-\x1F-\x7F].
		[[:digit:]] ------ Números [0-9].
		[[:graph:]] ------ Qualquer caractere visível (ou seja, exceto em branco) [\x20-\x7E].
		[[:lower:]] ------ Letras minúsculas [a-z].
		[[:upper:]] ------ Letras maiúsculas [A-Z].
		[[:print:]] ------ Caracteres visíveis (ou seja, exceto os de controle) [\x20-\x7E].
		[[:punct:]] ------ Pontuação [-!"#$%&'()*+,./:;?@[\\\]_{|}~].
		[[:space:]] ------ Espaço em branco [\t\r\n\v\f].
		[[:xdigit:]] ----- Número hexadecimais [0-9 a-f A-F].
		--------------------------------------------------------------------------------------
		Abreviações
		[[:digit:]] ------ \d.
		[[:alnum:]] ------ \w.
		[[:space:]] ------ \s.
		--------------------------------------------------------------------------------------
	EOF
}

print_array_expasion() {
	cat <<- \EOF
		---------------------------------------------------------------------------------
		${var[@]} ----------- Imprime todos os elementos do array em strings protegidas.
		${var[*]} ----------- Imprime todos os elementos do array em uma única expressão.
		${var[P]} ----------- Imprime o elemento na posição ‘P’.
		${#var[@]} ---------- Imprime o total de elementos do array.
		${!var[@]} ---------- Imprime os índices do array.
		${var[@]:N} --------- Imprime todos os elementos a partir da posição ‘N’.
		${var[@]:N:M} ------- Imprime ‘M’ elementos a partir da posição ‘N’.
		${var[@]: -N} ------- Imprime os últimos ‘N’ elementos.
		${var[@]: -N:M} ----- Imprime ‘M’ elementos a partir da última ‘N’ posição.
		---------------------------------------------------------------------------------
	EOF
}

print_extglob_bash() {
	cat <<- \EOF
		------------------------------------------------------------------------
		?(padrão) .....: Corresponde a uma ocorrência do padrão.
		*(padrão) .....: Corresponde a qualquer número de ocorrências do padrão.
		+(padrão) .....: Corresponde a pelo menos uma ocorrência do padrão.
		@(padrão) .....: Corresponde exatamente a uma ocorrência do padrão.
		!(padrão) .....: Corresponde a tudo, exceto o padrão.
		------------------------------------------------------------------------
	EOF
}

print_extglob_zsh() {
	cat <<- \EOF
		--------------------------------------------------
		^foobar ........: Nega o padrão.
		^(foo|bar) .....: Nega os padrões.
		foo~bar ........: Aceita "foo" e nega "bar".
		(foo)# .........: Zero ou mais ocorrências de foo.
		(foo)## ........: Uma ou mais ocorrências de foo.
		--------------------------------------------------
	EOF
}

print_unix_signals() {
	cat <<- \EOF
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------
		POSIX signals
		'01' (SIGHUP) ....: terminal do processo foi desconectado ou o processo encerrado (alguns deamons usam esse sinal para recarregar as configurações do processo).
		'02' (SIGINT) ....: interrompe o processo e aguarda o próximo comando do usuário,lançado no ctrl+c.
		'03' (SIGQUIT) ...: força o core dumped do processo e o termina, lançado no ctrl+\.
		'05' (SIGTRAP) ...: enviado esse sinal para o processo quando ocorre uma exceção ou quando cai numa trap.
		'09' (SIGKILL) ...: quando enviado ao processo causa seu encerramente imediato, diferentemente do SIGTERM e SIGINT esse sinal não pode ser capturado ou ignorado.
		'15' (SIGTERM) ...: quando enviado ao processo causa seu encerramento, porém, pode ser capturado ou ignorado pelo processo.
		'18' (SIGCONT) ...: enviado esse sinal para que o processo "reinicie", volte ao estado de running depois de SIGSTOP ou SIGTSTP.
		'19' (SIGSTOP) ...: quando enviado, o processo é pausado pelo sistema para ser resumido futuramente e pode apenas receber os sinais SIGKILL e SIGCONT.
		'20' (SIGTSTP) ...: sua diferença para o SIGSTOP é que quando pausado o processo ainda pode manipulado, lançado no ctrl+z.
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------
		Processes States
		'D' (UNINTERRUPTABLE_SLEEP) ...: processo dorme e aguarda alguma entrada, nesse estado se interrompido pode causar problemas.
		'R' (RUNNING & RUNNABLE) ......: processo está compra para ser executado ou já está em execução.
		'S' (INTERRRUPTABLE_SLEEP) ....: processo dorme e aguarda alguma entrada, nesse estado "pode ser" interrompido com segurança.
		'T' (STOPPED) .................: processo está pausado porém ainda pode ser manipulado ou resumido (ctrl+z » SIGTSTP).
		'Z' (ZOMBIE) ..................: processo que foi encerrado porém ainda está na tabela de processos, significa que ainda pode estar finalizando alguma atividade.
		-----------------------------------------------------------------------------------------------------------------------------------------------------------------
	EOF
}

# =============================================================================================

# ToDo List (SlackJeff)

TODO=${home}/Documents/anotacoes/.todo_list.txt

rand() { RAND=0; while [ ${#RAND} -lt 4 ]; do RAND=$((${RANDOM}%10000)); done; }
tlr() { sed -i "/^($(hostname)) ${1}/d" ${TODO}; clear; tla; }
tla() { rand; [ ${#} -eq 0 ] && cat "${TODO}" || echo "($(hostname)) ${RAND} » ${*}" >> ${TODO}; }

# =============================================================================================
